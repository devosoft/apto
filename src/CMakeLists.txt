SET(APTO_CORE_SOURCES)

SET(CORE_DIR ${PROJECT_SOURCE_DIR}/src/core)
SET(CORE_SOURCES
  ${CORE_DIR}/FileSystem.cc
  ${CORE_DIR}/PriorityScheduler.cc
  ${CORE_DIR}/Random.cc
  ${CORE_DIR}/String.cc
  ${CORE_DIR}/Thread.cc
)
SOURCE_GROUP(src\\core FILES ${CORE_SOURCES})
LIST(APPEND APTO_CORE_SOURCES ${CORE_SOURCES})

SET(PLATFORM_DIR ${PROJECT_SOURCE_DIR}/src/platform)
SET(PLATFORM_SOURCES
  ${PLATFORM_DIR}/FileSystem.cc
  ${PLATFORM_DIR}/Platform.cc
)
SOURCE_GROUP(src\\platform FILES ${PLATFORM_SOURCES})
LIST(APPEND APTO_CORE_SOURCES ${PLATFORM_SOURCES})

SET(RNG_DIR ${PROJECT_SOURCE_DIR}/src/rng)
SET(RNG_SOURCES
  ${RNG_DIR}/AvidaRNG.cc
)
SOURCE_GROUP(src\\rng FILES ${RNG_SOURCES})
LIST(APPEND APTO_CORE_SOURCES ${RNG_SOURCES})

SET(SCHEDULER_DIR ${PROJECT_SOURCE_DIR}/src/scheduler)
SET(SCHEDULER_SOURCES
  ${SCHEDULER_DIR}/Integrated.cc
  ${SCHEDULER_DIR}/Probabilistic.cc
  ${SCHEDULER_DIR}/ProbabilisticIntegrated.cc
  ${SCHEDULER_DIR}/RoundRobin.cc
)
SOURCE_GROUP(src\\scheduler FILES ${SCHEDULER_SOURCES})
LIST(APPEND APTO_CORE_SOURCES ${SCHEDULER_SOURCES})

SET(STAT_DIR ${PROJECT_SOURCE_DIR}/src/stat)
SET(STAT_SOURCES
  ${STAT_DIR}/ContingencyTable.cc
  ${STAT_DIR}/FishersExact.cc
)
SOURCE_GROUP(src\\stat FILES ${STAT_SOURCES})
LIST(APPEND APTO_CORE_SOURCES ${STAT_SOURCES})

INCLUDE_DIRECTORIES(../include)

CMAKE_DEPENDENT_OPTION(
      APTO_LIB_SHARED
      "Build a dynamic shared library"
      ON
      "EMSCRIPTEN" OFF
    )

IF(APTO_LIB_SHARED)
      ADD_LIBRARY(aptoshared SHARED ${APTO_CORE_SOURCES})
      SET_TARGET_PROPERTIES(aptoshared PROPERTIES OUTPUT_NAME apto COMPILE_FLAGS -DBUILDING_DLL)
      IF(NOT MSVC)
        TARGET_LINK_LIBRARIES(aptoshared pthread)
      ENDIF(NOT MSVC)
      INSTALL(TARGETS aptoshared DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
      SET(aptoshared_BUILT 1 CACHE INTERNAL "")
    ENDIF(APTO_LIB_SHARED)

ENDIF(APTO_LIB_SHARED)

CMAKE_DEPENDENT_OPTION(APTO_LIB_STATIC
   "Build a static library"
   ON
   "EMSCRIPTEN" OFF
)

IF(APTO_LIB_STATIC)
    ADD_LIBRARY(aptostatic STATIC ${APTO_CORE_SOURCES})
    SET_TARGET_PROPERTIES(aptostatic PROPERTIES OUTPUT_NAME apto)
    IF(NOT MSVC AND NOT EMSCRIPTEN)
      TARGET_LINK_LIBRARIES(aptoshared pthread)
    ENDIF(NOT MSVC AND NOT EMSCRIPTEN)
    INSTALL(TARGETS aptostatic DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
    SET(aptostatic_BUILT 1 CACHE INTERNAL "")
ENDIF(APTO_LIB_STATIC)
   
  
# Currently the LLVM-archiver cannot handle files with the same name
# when attempting to retrieve object code.  To handle this "feature"
# we will create an "object library" to emulate the creation of an
# actual library
IF(EMSCRIPTEN)
   ADD_LIBRARY(apto_objs OBJECT ${APTO_CORE_SOURCES})
ENDIF(EMSCRIPTEN)

